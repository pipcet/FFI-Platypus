ffi_pl_string     T_FFI_PL_STRING
ffi_pl_type*      T_FFI_PL_TYPE
ffi_pl_function*  T_FFI_PL_FUNCTION
ffi_pl_closure*   T_FFI_PL_CLOSURE_DATA
ffi_pl_arguments* T_FFI_PL_ARGUMENTS
ffi_type*         T_FFI_PL_FFI_TYPE

OUTPUT
T_FFI_PL_STRING
  $var != NULL ? sv_setpv((SV*)$arg, $var) : sv_setsv((SV*)$arg, &PL_sv_undef);

T_FFI_PL_TYPE
  do
  {
    HV *hv;
    SV *sv = newSV(0);
    HV *stash = gv_stashpv(\"FFI::Platypus::Type\", GV_ADD);
    hv = $var->hv;
    if (hv)
    {
      SvREFCNT_inc(hv);
    }
    else
    {
      hv = newHV();
      $var->hv = hv;
    }
    sv_setref_pv(sv, \"FFI::Platypus::Type::C\", (void *) $var);
    hv_store(hv, \"ffi_pl_type\", strlen(\"ffi_pl_type\"), sv, 0);
    $arg = newRV_inc((SV*)hv);
    sv_bless($arg, stash);
  }
  while(0);

T_FFI_PL_FUNCTION
  sv_setref_pv($arg, \"FFI::Platypus::Function\", (void *) $var);

T_FFI_PL_CLOSURE_DATA
  sv_setref_pv($arg, \"FFI::Platypus::ClosureData\", (void *) $var);

T_FFI_PL_FFI_TYPE
  sv_setref_pv($arg, \"FFI::Platypus::Type::FFI\", (void *) $var);

INPUT
T_FFI_PL_STRING
  $var = SvOK($arg) ? ($type)SvPV_nolen($arg) : NULL;

T_FFI_PL_TYPE
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Type\")) {
    HV *hv = (HV*)SvRV($arg);
    SV **svp = hv_fetch(hv, \"ffi_pl_type\", strlen(\"ffi_pl_type\"), 0);
    if (svp == NULL)
      Perl_croak(aTHX_ \"$var is missing the ffi_pl_type hash entry\");
    $var = INT2PTR($type, SvIV((SV*)SvRV(*svp)));
  } else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Type\");

T_FFI_PL_FUNCTION
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Function\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Function\");

T_FFI_PL_CLOSURE_DATA
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::ClosureData\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::ClosureData\");

T_FFI_PL_ARGUMENTS
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::API::ARGV\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::API::ARGV\");

T_FFI_PL_FFI_TYPE
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Type::FFI\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Type::FFI\");
