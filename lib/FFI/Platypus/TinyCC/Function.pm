package FFI::Platypus::TinyCC::Function;
use parent -norequire, 'FFI::Platypus::RTypes::Function';

use strict;
use warnings;
use 5.008001;
use Carp qw( croak );
use Scalar::Util qw( refaddr weaken );

use Config;
use File::Spec;

sub attach
{
  my($self, $attach_name, $attach_location, $proto) = @_;

  my $name = "TESTTEST";

  my $xs;
  $xs = $self->xs_cdecl($name) if $self->can('xs_cdecl');

  return $self->SUPER::attach($attach_name, $attach_location, $proto) unless defined $xs;

  require FFI::TinyCC;
  my $tcc = FFI::TinyCC->new;

  $tcc->detect_sysinclude_path;
  # we can't use ExtUtils::Embed because that breaks things if we're launched as perl -e.
  my $options = `perl -MExtUtils::Embed -e ccopts`;
  chomp $options;
  $tcc->set_options($options);
  my $program = qq{/* AUTOGENERATED CODE. DO NOT EDIT. */
#define __builtin_expect(e,v) (e)
#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

$xs

void install_xsub(void)
{
  dTHX;
  newXS("$attach_name", $name, "$attach_location");
}
};
  $tcc->compile_string($program) or die "couldn't compile string";
  my $address = $tcc->get_symbol('install_xsub');
  $self->{ffi}->function($address => [] => 'void')->call();

  return 1;
}

1;
